/**
 * 
 */
package com.bibsmobile.model.dto;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.PersistenceContext;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.TypedQuery;

import org.apache.commons.codec.binary.Base64;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.transaction.annotation.Transactional;

import com.bibsmobile.model.DeviceStatus;
import com.bibsmobile.model.Event;
import com.bibsmobile.model.FuseDevice;
import com.bibsmobile.model.RaceResult;
import com.bibsmobile.model.ReaderStatus;
import com.bibsmobile.model.SyncReport;
import com.bibsmobile.model.TimeSyncEnum;
import com.bibsmobile.model.TimeSyncStatusEnum;
import com.bibsmobile.model.dto.TimeSyncContainerDto;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Used to transfer data about a device to a device.
 * @author galen {gedanziger}
 *
 */
public class DeviceStatusDisplayDto {
	/**
	 * Autogenerated id for search/lookup.
	 */
    private Long id;
	
	/**
	 * Secret key.
	 */
	private String name;

	/**
	 * Date object of last seen time
	 */
	private Date lastSeenTime;
	
	/**
	 * Last status of device
	 */
	private ReaderStatus lastStatus;
	
	/**
	 * Default Contructor
	 */
	DeviceStatusDisplayDto() {
		
	}
	
	/**
	 * Create a condensed FuseDevice for encoding as a certificate
	 * @param fuseDevice device to generate cert for.
	 */
	public DeviceStatusDisplayDto(FuseDevice fuseDevice) {
		this.id = fuseDevice.getId();
		this.name = fuseDevice.getDeviceName();
		DeviceStatus status = DeviceStatus.getLatestStatusForDevice(fuseDevice);
		this.lastStatus = status.getReaderStatus();
		this.lastSeenTime = status.getCreated();
	}
	
	public static String fromFuseDevicesToDtoArray(Collection<FuseDevice> devices ) {
		List <DeviceStatusDisplayDto> dtos = new ArrayList <DeviceStatusDisplayDto>();
		for(FuseDevice device : devices) {
			dtos.add(new DeviceStatusDisplayDto(device));
		}
		ObjectMapper mapper = new ObjectMapper();
		try {
			return mapper.writeValueAsString(dtos);
		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}	
    
	/**
	 * ID of series, autogenerated on persist.
	 * @return the id
	 */
	public Long getId() {
		return id;
	}


	/**
	 * @return the secret
	 */
	public String getName() {
		return name;
	}

	/**
	 * @return the lastSeenTime
	 */
	public Date getLastSeenTime() {
		return lastSeenTime;
	}

	/**
	 * @return the lastStatus
	 */
	public ReaderStatus getLastStatus() {
		return lastStatus;
	}

	public String toJson() throws JsonProcessingException {
		ObjectMapper mapper = new ObjectMapper();
		return mapper.writeValueAsString(this);
	}
}

/**
 * 
 */
package com.bibsmobile.model.dto;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.PersistenceContext;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.TypedQuery;

import org.apache.commons.codec.binary.Base64;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.transaction.annotation.Transactional;

import com.bibsmobile.model.Event;
import com.bibsmobile.model.FuseDevice;
import com.bibsmobile.model.SyncReport;
import com.bibsmobile.model.TimeSyncEnum;
import com.bibsmobile.model.TimeSyncStatusEnum;
import com.bibsmobile.model.dto.TimeSyncContainerDto;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Used to transfer data about a device to a device.
 * @author galen {gedanziger}
 *
 */
public class FuseDeviceCertificate {
	/**
	 * Autogenerated id for search/lookup.
	 */
    private Long id;
	
	/**
	 * Secret key.
	 */
	private String secret;

	
	/**
	 * Default Contructor
	 */
	FuseDeviceCertificate() {
		
	}
	
	/**
	 * Create a condensed FuseDevice for encoding as a certificate
	 * @param fuseDevice device to generate cert for.
	 */
	public FuseDeviceCertificate(FuseDevice fuseDevice) {
		this.id = fuseDevice.getId();
		this.secret = fuseDevice.getSecret();
	}
    
	/**
	 * ID of series, autogenerated on persist.
	 * @return the id
	 */
	public Long getId() {
		return id;
	}


	/**
	 * @return the secret
	 */
	public String getSecret() {
		return secret;
	}
	
	public String toJson() throws JsonProcessingException {
		ObjectMapper mapper = new ObjectMapper();
		return mapper.writeValueAsString(this);
	}
	
	public String createEncodedCert() throws JsonProcessingException {
		return Base64.encodeBase64String(this.toJson().getBytes());
	}
}

// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bibsmobile.model;

import com.bibsmobile.model.CartItem;
import com.bibsmobile.model.EventCartItem;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect CartItem_Roo_Finder {
    
    public static Long CartItem.countFindCartItemsByCreatedGreaterThan(Date created) {
        if (created == null) throw new IllegalArgumentException("The created argument is required");
        EntityManager em = CartItem.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CartItem AS o WHERE o.created > :created", Long.class);
        q.setParameter("created", created);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CartItem.countFindCartItemsByEventCartItem(EventCartItem eventCartItem) {
        if (eventCartItem == null) throw new IllegalArgumentException("The eventCartItem argument is required");
        EntityManager em = CartItem.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CartItem AS o WHERE o.eventCartItem = :eventCartItem", Long.class);
        q.setParameter("eventCartItem", eventCartItem);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<CartItem> CartItem.findCartItemsByCreatedGreaterThan(Date created) {
        if (created == null) throw new IllegalArgumentException("The created argument is required");
        EntityManager em = CartItem.entityManager();
        TypedQuery<CartItem> q = em.createQuery("SELECT o FROM CartItem AS o WHERE o.created > :created", CartItem.class);
        q.setParameter("created", created);
        return q;
    }
    
    public static TypedQuery<CartItem> CartItem.findCartItemsByCreatedGreaterThan(Date created, String sortFieldName, String sortOrder) {
        if (created == null) throw new IllegalArgumentException("The created argument is required");
        EntityManager em = CartItem.entityManager();
        String jpaQuery = "SELECT o FROM CartItem AS o WHERE o.created > :created";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<CartItem> q = em.createQuery(jpaQuery, CartItem.class);
        q.setParameter("created", created);
        return q;
    }
    
    public static TypedQuery<CartItem> CartItem.findCartItemsByEventCartItem(EventCartItem eventCartItem) {
        if (eventCartItem == null) throw new IllegalArgumentException("The eventCartItem argument is required");
        EntityManager em = CartItem.entityManager();
        TypedQuery<CartItem> q = em.createQuery("SELECT o FROM CartItem AS o WHERE o.eventCartItem = :eventCartItem", CartItem.class);
        q.setParameter("eventCartItem", eventCartItem);
        return q;
    }

    public static TypedQuery<CartItem> CartItem.findCartItemsByEventCartItems(List<EventCartItem> eventCartItems, Date greaterThan, Date lessThan) {
        if (eventCartItems == null) throw new IllegalArgumentException("The eventCartItems argument is required");
        EntityManager em = CartItem.entityManager();
        String jpaQuery = "SELECT o FROM CartItem AS o WHERE o.eventCartItem IN (:eventCartItems)";
        if (greaterThan != null) {
            jpaQuery += " AND o.created > :fromDate";
        }
        if (lessThan != null) {
            jpaQuery += " AND o.created < :toDate";
        }
        TypedQuery<CartItem> q = em.createQuery(jpaQuery, CartItem.class);
        q.setParameter("eventCartItems", eventCartItems);
        if (greaterThan != null) {
            q.setParameter("fromDate", greaterThan);
        }
        if (lessThan != null) {
            q.setParameter("toDate", lessThan);
        }
        return q;
    }
    
    public static TypedQuery<CartItem> CartItem.findCartItemsByEventCartItem(EventCartItem eventCartItem, String sortFieldName, String sortOrder) {
        if (eventCartItem == null) throw new IllegalArgumentException("The eventCartItem argument is required");
        EntityManager em = CartItem.entityManager();
        String jpaQuery = "SELECT o FROM CartItem AS o WHERE o.eventCartItem = :eventCartItem";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<CartItem> q = em.createQuery(jpaQuery, CartItem.class);
        q.setParameter("eventCartItem", eventCartItem);
        return q;
    }
    
}

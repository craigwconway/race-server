/**
 * 
 */
package com.bibsmobile.model;

import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.PersistenceContext;

import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.transaction.annotation.Transactional;

/**
 * Represents a series of athletic events. An example is the series:
 * "Zappos 200", which is sponsored by the sportswear company Zappos.
 * Subqueries on events in this series may be performed, and users can
 * earn rewards specific to this group of events.
 * @author galen {gedanziger}
 *
 */
@Entity
@Configurable
public class Series {
	/**
	 * Autogenerated id
	 */
	@Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;
	
	/**
	 * Name of the series
	 */
	private String name;

	/**
	 * Events in the series
	 */
	@OneToMany(fetch = FetchType.LAZY, cascade = { CascadeType.ALL }, mappedBy = "series")
	private Set <Event> events;
	
	/**
	 * Name of title sponsor
	 */
	private String titleSponsor;

	/**
	 * URL of series logo
	 */
	private String logo;

	/**
	 * Short description of series
	 */
	private String description;

	/**
	 * Used by hibernate
	 */
	@PersistenceContext
    transient EntityManager entityManager;

	/**
	 * Used by hibernate
	 */
	public static final EntityManager entityManager() {
        EntityManager em = new Series().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

	@Transactional
    public void persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

	@Transactional
    public void remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Series attached = Series.findSeries(this.id);
            this.entityManager.remove(attached);
        }
    }

	@Transactional
    public void flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

	@Transactional
    public void clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

	@Transactional
    public Series merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Series merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }	
	
	public static Series findSeries(Long id) {
        if (id == null) return null;
        return entityManager().find(Series.class, id);
    }
	
	/**
	 * ID of series, autogenerated on persist.
	 * @return the id
	 */
	public Long getId() {
		return id;
	}

	/**
	 * ID of series, autogenerated on persist.
	 * @param id the id to set
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Name of series (e.g. Zappos 200)
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * Name of series (e.g. Zappos 200)
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Company providing title sponsorship to series (e.g. Zappos)
	 * @return String containing title sponsor's name
	 */
	public String getTitleSponsor() {
		return titleSponsor;
	}

	/**
	 * Company providing title sponsorship to series (e.g. Zappos)
	 * @param titleSponsor String containing title sponsor's name
	 */
	public void setTitleSponsor(String titleSponsor) {
		this.titleSponsor = titleSponsor;
	}

	/**
	 * URL containing series logo.
	 * @return the logo
	 */
	public String getLogo() {
		return logo;
	}

	/**
	 * URL containing series logo.
	 * @param logo String containing logo to set
	 */
	public void setLogo(String logo) {
		this.logo = logo;
	}

	/**
	 * A short description of the series from sponsor.
	 * @return String containing description
	 */
	public String getDescription() {
		return description;
	}

	/**
	 * A short description of the series from sponsor.
	 * @param description the description to set
	 */
	public void setDescription(String description) {
		this.description = description;
	}
}

// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bibsmobile.model;

import com.bibsmobile.model.UserAuthorities;
import com.bibsmobile.model.UserGroup;
import com.bibsmobile.model.UserGroupUserAuthority;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect UserGroupUserAuthority_Roo_Finder {
    
    public static Long UserGroupUserAuthority.countFindUserGroupUserAuthoritysByUserAuthorities(UserAuthorities userAuthorities) {
        if (userAuthorities == null) throw new IllegalArgumentException("The userAuthorities argument is required");
        EntityManager em = UserGroupUserAuthority.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM UserGroupUserAuthority AS o WHERE o.userAuthorities = :userAuthorities", Long.class);
        q.setParameter("userAuthorities", userAuthorities);
        return ((Long) q.getSingleResult());
    }
    
    public static Long UserGroupUserAuthority.countFindUserGroupUserAuthoritysByUserGroup(UserGroup userGroup) {
        if (userGroup == null) throw new IllegalArgumentException("The userGroup argument is required");
        EntityManager em = UserGroupUserAuthority.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM UserGroupUserAuthority AS o WHERE o.userGroup = :userGroup", Long.class);
        q.setParameter("userGroup", userGroup);
        return ((Long) q.getSingleResult());
    }
    
    public static Long UserGroupUserAuthority.countFindUserGroupUserAuthoritysByUserGroupAndUserAuthorities(UserGroup userGroup, UserAuthorities userAuthorities) {
        if (userGroup == null) throw new IllegalArgumentException("The userGroup argument is required");
        if (userAuthorities == null) throw new IllegalArgumentException("The userAuthorities argument is required");
        EntityManager em = UserGroupUserAuthority.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM UserGroupUserAuthority AS o WHERE o.userGroup = :userGroup AND o.userAuthorities = :userAuthorities", Long.class);
        q.setParameter("userGroup", userGroup);
        q.setParameter("userAuthorities", userAuthorities);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<UserGroupUserAuthority> UserGroupUserAuthority.findUserGroupUserAuthoritysByUserAuthorities(UserAuthorities userAuthorities) {
        if (userAuthorities == null) throw new IllegalArgumentException("The userAuthorities argument is required");
        EntityManager em = UserGroupUserAuthority.entityManager();
        TypedQuery<UserGroupUserAuthority> q = em.createQuery("SELECT o FROM UserGroupUserAuthority AS o WHERE o.userAuthorities = :userAuthorities", UserGroupUserAuthority.class);
        q.setParameter("userAuthorities", userAuthorities);
        return q;
    }
    
    public static TypedQuery<UserGroupUserAuthority> UserGroupUserAuthority.findUserGroupUserAuthoritysByUserAuthorities(UserAuthorities userAuthorities, String sortFieldName, String sortOrder) {
        if (userAuthorities == null) throw new IllegalArgumentException("The userAuthorities argument is required");
        EntityManager em = UserGroupUserAuthority.entityManager();
        String jpaQuery = "SELECT o FROM UserGroupUserAuthority AS o WHERE o.userAuthorities = :userAuthorities";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<UserGroupUserAuthority> q = em.createQuery(jpaQuery, UserGroupUserAuthority.class);
        q.setParameter("userAuthorities", userAuthorities);
        return q;
    }
    
    public static TypedQuery<UserGroupUserAuthority> UserGroupUserAuthority.findUserGroupUserAuthoritysByUserGroup(UserGroup userGroup) {
        if (userGroup == null) throw new IllegalArgumentException("The userGroup argument is required");
        EntityManager em = UserGroupUserAuthority.entityManager();
        TypedQuery<UserGroupUserAuthority> q = em.createQuery("SELECT o FROM UserGroupUserAuthority AS o WHERE o.userGroup = :userGroup", UserGroupUserAuthority.class);
        q.setParameter("userGroup", userGroup);
        return q;
    }
    
    public static TypedQuery<UserGroupUserAuthority> UserGroupUserAuthority.findUserGroupUserAuthoritysByUserGroup(UserGroup userGroup, String sortFieldName, String sortOrder) {
        if (userGroup == null) throw new IllegalArgumentException("The userGroup argument is required");
        EntityManager em = UserGroupUserAuthority.entityManager();
        String jpaQuery = "SELECT o FROM UserGroupUserAuthority AS o WHERE o.userGroup = :userGroup";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<UserGroupUserAuthority> q = em.createQuery(jpaQuery, UserGroupUserAuthority.class);
        q.setParameter("userGroup", userGroup);
        return q;
    }
    
    public static TypedQuery<UserGroupUserAuthority> UserGroupUserAuthority.findUserGroupUserAuthoritysByUserGroupAndUserAuthorities(UserGroup userGroup, UserAuthorities userAuthorities) {
        if (userGroup == null) throw new IllegalArgumentException("The userGroup argument is required");
        if (userAuthorities == null) throw new IllegalArgumentException("The userAuthorities argument is required");
        EntityManager em = UserGroupUserAuthority.entityManager();
        TypedQuery<UserGroupUserAuthority> q = em.createQuery("SELECT o FROM UserGroupUserAuthority AS o WHERE o.userGroup = :userGroup AND o.userAuthorities = :userAuthorities", UserGroupUserAuthority.class);
        q.setParameter("userGroup", userGroup);
        q.setParameter("userAuthorities", userAuthorities);
        return q;
    }
    
    public static TypedQuery<UserGroupUserAuthority> UserGroupUserAuthority.findUserGroupUserAuthoritysByUserGroupAndUserAuthorities(UserGroup userGroup, UserAuthorities userAuthorities, String sortFieldName, String sortOrder) {
        if (userGroup == null) throw new IllegalArgumentException("The userGroup argument is required");
        if (userAuthorities == null) throw new IllegalArgumentException("The userAuthorities argument is required");
        EntityManager em = UserGroupUserAuthority.entityManager();
        String jpaQuery = "SELECT o FROM UserGroupUserAuthority AS o WHERE o.userGroup = :userGroup AND o.userAuthorities = :userAuthorities";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<UserGroupUserAuthority> q = em.createQuery(jpaQuery, UserGroupUserAuthority.class);
        q.setParameter("userGroup", userGroup);
        q.setParameter("userAuthorities", userAuthorities);
        return q;
    }
    
}

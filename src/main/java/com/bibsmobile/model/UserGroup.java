package com.bibsmobile.model;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.persistence.Version;
import javax.validation.constraints.NotNull;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ReflectionToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Indexed;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.transaction.annotation.Transactional;

import flexjson.JSONDeserializer;
import flexjson.JSONSerializer;

/**
 * This object represents an organization of {@link UserProfile users} that are involved
 * with a set of {@link Event events}.
 * @author galen
 *
 */
@Entity
@Configurable
@Indexed
public class UserGroup {

	/**
	 * Autogenerated ID
	 */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long id;

    /**
     * Used for version collisions
     */
    @Version
    @Column(name = "version")
    private Integer version;

    /**
     * Name of Organization. 255 characters max.
     */
    @Field
    private String name;
    
    /**
     * URL holding logo of organization.
     */
    private String logo;

    /**
     * Description of {@link UserGroup} object. 2000 Characters max.
     */
    @Column(length = 2000)
    private String description;

    /**
     * Enumeration of each type of {@link UserGroup} objects.
     */
    @NotNull
    @Enumerated
    private UserGroupType groupType;

    /**
     * Mapping of all permissions of each user in this group. Each {@link UserProfile} has
     * a {@link UserAuthority} in this group defined in {@link UserAuthority}.
     */
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "id.userGroup", cascade = CascadeType.ALL)
    private Set<UserGroupUserAuthority> userGroupUserAuthorities;

    /**
     * Set of {@link Event} objects this user group is involved with.
     */
    @OneToMany(fetch = FetchType.LAZY, cascade = { CascadeType.ALL }, mappedBy = "userGroup")
    private List<EventUserGroup> eventUserGroups = new ArrayList<>();

    public static Long countFindUserGroupsByGroupType(UserGroupType groupType) {
        if (groupType == null)
            throw new IllegalArgumentException("The groupType argument is required");
        EntityManager em = UserGroup.entityManager();
        TypedQuery<Long> q = em.createQuery("SELECT COUNT(o) FROM UserGroup AS o WHERE o.groupType = :groupType", Long.class);
        q.setParameter("groupType", groupType);
        return q.getSingleResult();
    }

    @PersistenceContext
    transient EntityManager entityManager;

    public static final List<String> fieldNames4OrderClauseFilter = Arrays.asList("name", "groupType", "userGroupUserAuthorities", "eventUserGroups");

    public static EntityManager entityManager() {
        EntityManager em = new UserGroup().entityManager;
        if (em == null)
            throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long countUserGroups() {
        return entityManager().createQuery("SELECT COUNT(o) FROM UserGroup o", Long.class).getSingleResult();
    }

    /**
     * Get all {@link UserGroup} objects in the database. WARNING: very computationally expensive.
     * @return A list of {@link UserGroup} objects.
     */
    public static List<UserGroup> findAllUserGroups() {
        return entityManager().createQuery("SELECT o FROM UserGroup o", UserGroup.class).getResultList();
    }

    /**
     * Get all {@link UserGroup} objects in the database. Warning: very computationally expensive.
     * @param sortFieldName property to sort on.
     * @param sortOrder Order of property. Can be "ASC" for Ascending or "DESC" for descending.
     * @return A list of {@link UserGroup} objects.
     */
    public static List<UserGroup> findAllUserGroups(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM UserGroup o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, UserGroup.class).getResultList();
    }

    public static UserGroup findUserGroup(Long id) {
        if (id == null)
            return null;
        return entityManager().find(UserGroup.class, id);
    }

    public static List<UserGroup> findUserGroupEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM UserGroup o", UserGroup.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

    public static List<UserGroup> findUserGroupEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM UserGroup o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, UserGroup.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

    @Transactional
    public void persist() {
        if (this.entityManager == null)
            this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void remove() {
        if (this.entityManager == null)
            this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            UserGroup attached = UserGroup.findUserGroup(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void flush() {
        if (this.entityManager == null)
            this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void clear() {
        if (this.entityManager == null)
            this.entityManager = entityManager();
        this.entityManager.clear();
    }

    @Transactional
    public UserGroup merge() {
        if (this.entityManager == null)
            this.entityManager = entityManager();
        UserGroup merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (this == obj) return true;
        if (obj.getClass() != this.getClass()) return false;
        UserGroup rhs = (UserGroup) obj;
        return new EqualsBuilder().append(this.groupType, rhs.groupType).append(this.id, rhs.id).append(this.name, rhs.name).isEquals();
    }

    @Override
    public int hashCode() {
        return new HashCodeBuilder().append(this.groupType).append(this.id).append(this.name).toHashCode();
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public UserGroupType getGroupType() {
        return this.groupType;
    }

    public void setGroupType(UserGroupType groupType) {
        this.groupType = groupType;
    }

    public Set<UserGroupUserAuthority> getUserGroupUserAuthorities() {
        return this.userGroupUserAuthorities;
    }

    public void setUserGroupUserAuthorities(Set<UserGroupUserAuthority> userGroupUserAuthorities) {
        this.userGroupUserAuthorities = userGroupUserAuthorities;
    }

    public List<EventUserGroup> getEventUserGroups() {
        return this.eventUserGroups;
    }

    public void setEventUserGroups(List<EventUserGroup> eventUserGroups) {
        this.eventUserGroups = eventUserGroups;
    }

    public String toJson() {
        return new JSONSerializer().exclude("*.class").serialize(this);
    }

    public String toJson(String[] fields) {
        return new JSONSerializer().include(fields).exclude("*.class").serialize(this);
    }

    public static UserGroup fromJsonToUserGroup(String json) {
        return new JSONDeserializer<UserGroup>().use(null, UserGroup.class).deserialize(json);
    }

    public static String toJsonArray(Collection<UserGroup> collection) {
        return new JSONSerializer().exclude("*.class").serialize(collection);
    }

    public static String toJsonArray(Collection<UserGroup> collection, String[] fields) {
        return new JSONSerializer().include(fields).exclude("*.class").serialize(collection);
    }

    /**
     * JSON Deserialization method using flexjson. 
     * It expects an object containing: {"values":[{...}, {...}]
     * @param json String json object containing {@link UserGroup} objects.
     * @return A set of {@link UserGroup} objects contained in the object.
     */
    public static Collection<UserGroup> fromJsonArrayToUserGroups(String json) {
        return new JSONDeserializer<List<UserGroup>>().use("values", UserGroup.class).deserialize(json);
    }

    /**
     * Get number of {@link UserGroup} object with the supplied name. This is a database query.
     * @param name Name to search for.
     * @return A Long containing the number of groups with this name. This will not be null.
     */
    public static Long countFindUserGroupsByNameEquals(String name) {
        if (name == null || name.isEmpty())
            throw new IllegalArgumentException("The name argument is required");
        EntityManager em = UserGroup.entityManager();
        TypedQuery<Long> q = em.createQuery("SELECT COUNT(o) FROM UserGroup AS o WHERE o.name = :name", Long.class);
        q.setParameter("name", name);
        return q.getSingleResult();
    }

    /**
     * Search for organizations by {@link UserGroupType type}. This is a database select.
     * @param groupType The {@link UserGroupType type} to perform the query on.
     * @return A TypedQuery object of the results. It is necessary to invoke the getResultList() method on this
     * to convert this to {@link UserGroup} objects.
     */
    public static TypedQuery<UserGroup> findUserGroupsByGroupType(UserGroupType groupType) {
        if (groupType == null)
            throw new IllegalArgumentException("The groupType argument is required");
        EntityManager em = UserGroup.entityManager();
        TypedQuery<UserGroup> q = em.createQuery("SELECT o FROM UserGroup AS o WHERE o.groupType = :groupType", UserGroup.class);
        q.setParameter("groupType", groupType);
        return q;
    }

    /**
     * Search for organizations by {@link UserGroupType type}. This is a database select.
     * @param groupType The {@link UserGroupType type} to perform the query on.
     * @param sortFieldName Property to sort on.
     * @param sortOrder Order of property. Can be "ASC" for Ascending or "DESC" for descending. 
     * @return A TypedQuery object of the results. It is necessary to invoke the getResultList() method on this
     * to convert this to {@link UserGroup} objects.
     */
    public static TypedQuery<UserGroup> findUserGroupsByGroupType(UserGroupType groupType, String sortFieldName, String sortOrder) {
        if (groupType == null)
            throw new IllegalArgumentException("The groupType argument is required");
        EntityManager em = UserGroup.entityManager();
        String jpaQuery = "SELECT o FROM UserGroup AS o WHERE o.groupType = :groupType";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<UserGroup> q = em.createQuery(jpaQuery, UserGroup.class);
        q.setParameter("groupType", groupType);
        return q;
    }

    /**
     * Search for organizations by name and sort by id. This is a database select.
     * @param name Name to query.
     * @return A TypedQuery object of the results. It is necessary to invoke the getResultList() method on this
     * to get usable objects out.
     */
    public static TypedQuery<UserGroup> findUserGroupsByNameEquals(String name) {
        if (name == null || name.isEmpty())
            throw new IllegalArgumentException("The name argument is required");
        EntityManager em = UserGroup.entityManager();
        TypedQuery<UserGroup> q = em.createQuery("SELECT o FROM UserGroup AS o WHERE o.name = :name", UserGroup.class);
        q.setParameter("name", name);
        return q;
    }

    /**
     * Search for organizations by name and sort. This is a database select.
     * @param name Name to query
     * @param sortFieldName Property to sort on
     * @param sortOrder Order of property. Can be "ASC" for Ascending or "DESC" for descending.
     * @return A TypedQuery object of the results. It is necessary to invoke the getResultList() method on this
     * to get usable objects out.
     */
    public static TypedQuery<UserGroup> findUserGroupsByNameEquals(String name, String sortFieldName, String sortOrder) {
        if (name == null || name.isEmpty())
            throw new IllegalArgumentException("The name argument is required");
        EntityManager em = UserGroup.entityManager();
        String jpaQuery = "SELECT o FROM UserGroup AS o WHERE o.name = :name";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<UserGroup> q = em.createQuery(jpaQuery, UserGroup.class);
        q.setParameter("name", name);
        return q;
    }

    /**
     * Get primary key {@link id} for this object.
     * @return
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Set primary key {@link id} for this object.
     * @param id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Get version number {@link version} for this object.
     * @return the version number of the object.
     */
    public Integer getVersion() {
        return this.version;
    }

    /**
     * Set version number {@link version} for this object.
     * @param version the version number to set.
     */
    public void setVersion(Integer version) {
        this.version = version;
    }

    public String getLogo() {
		return logo;
	}

	public void setLogo(String logo) {
		this.logo = logo;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	/**
     * Representation of this object as a string.
     */
    @Override
    public String toString() {
        return ReflectionToStringBuilder.toString(this, ToStringStyle.SHORT_PREFIX_STYLE);
    }

    /**
     * Get all users belonging to this group as {@link UserProfile} objects.
     * @return
     */
    public Set<UserProfile> getMembers() {
        Set<UserProfile> members = new HashSet<>();
        for (UserGroupUserAuthority ugua : this.getUserGroupUserAuthorities()) {
            UserAuthorities uas = ugua.getUserAuthorities();
            members.add(uas.getUserProfile());
        }
        return members;
    }
}

// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bibsmobile.model;

import com.bibsmobile.model.UserProfile;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect UserProfile_Roo_Finder {
    
    public static Long UserProfile.countFindUserProfilesByDropboxIdEquals(String dropboxId) {
        if (dropboxId == null || dropboxId.length() == 0) throw new IllegalArgumentException("The dropboxId argument is required");
        EntityManager em = UserProfile.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM UserProfile AS o WHERE o.dropboxId = :dropboxId", Long.class);
        q.setParameter("dropboxId", dropboxId);
        return ((Long) q.getSingleResult());
    }
    
    public static Long UserProfile.countFindUserProfilesByForgotPasswordCodeEquals(String forgotPasswordCode) {
        if (forgotPasswordCode == null || forgotPasswordCode.length() == 0) throw new IllegalArgumentException("The forgotPasswordCode argument is required");
        EntityManager em = UserProfile.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM UserProfile AS o WHERE o.forgotPasswordCode = :forgotPasswordCode", Long.class);
        q.setParameter("forgotPasswordCode", forgotPasswordCode);
        return ((Long) q.getSingleResult());
    }
    
    public static Long UserProfile.countFindUserProfilesByUsernameEquals(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = UserProfile.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM UserProfile AS o WHERE o.username = :username", Long.class);
        q.setParameter("username", username);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<UserProfile> UserProfile.findUserProfilesByDropboxIdEquals(String dropboxId) {
        if (dropboxId == null || dropboxId.length() == 0) throw new IllegalArgumentException("The dropboxId argument is required");
        EntityManager em = UserProfile.entityManager();
        TypedQuery<UserProfile> q = em.createQuery("SELECT o FROM UserProfile AS o WHERE o.dropboxId = :dropboxId", UserProfile.class);
        q.setParameter("dropboxId", dropboxId);
        return q;
    }
    
    public static TypedQuery<UserProfile> UserProfile.findUserProfilesByDropboxIdEquals(String dropboxId, String sortFieldName, String sortOrder) {
        if (dropboxId == null || dropboxId.length() == 0) throw new IllegalArgumentException("The dropboxId argument is required");
        EntityManager em = UserProfile.entityManager();
        String jpaQuery = "SELECT o FROM UserProfile AS o WHERE o.dropboxId = :dropboxId";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<UserProfile> q = em.createQuery(jpaQuery, UserProfile.class);
        q.setParameter("dropboxId", dropboxId);
        return q;
    }
    
    public static TypedQuery<UserProfile> UserProfile.findUserProfilesByEmailEquals(String email, String sortFieldName, String sortOrder) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = UserProfile.entityManager();
        String jpaQuery = "SELECT o FROM UserProfile AS o WHERE o.email = :email";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<UserProfile> q = em.createQuery(jpaQuery, UserProfile.class);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<UserProfile> UserProfile.findUserProfilesByForgotPasswordCodeEquals(String forgotPasswordCode) {
        if (forgotPasswordCode == null || forgotPasswordCode.length() == 0) throw new IllegalArgumentException("The forgotPasswordCode argument is required");
        EntityManager em = UserProfile.entityManager();
        TypedQuery<UserProfile> q = em.createQuery("SELECT o FROM UserProfile AS o WHERE o.forgotPasswordCode = :forgotPasswordCode", UserProfile.class);
        q.setParameter("forgotPasswordCode", forgotPasswordCode);
        return q;
    }
    
    public static TypedQuery<UserProfile> UserProfile.findUserProfilesByForgotPasswordCodeEquals(String forgotPasswordCode, String sortFieldName, String sortOrder) {
        if (forgotPasswordCode == null || forgotPasswordCode.length() == 0) throw new IllegalArgumentException("The forgotPasswordCode argument is required");
        EntityManager em = UserProfile.entityManager();
        String jpaQuery = "SELECT o FROM UserProfile AS o WHERE o.forgotPasswordCode = :forgotPasswordCode";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<UserProfile> q = em.createQuery(jpaQuery, UserProfile.class);
        q.setParameter("forgotPasswordCode", forgotPasswordCode);
        return q;
    }
    
    public static TypedQuery<UserProfile> UserProfile.findUserProfilesByUsernameEquals(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = UserProfile.entityManager();
        TypedQuery<UserProfile> q = em.createQuery("SELECT o FROM UserProfile AS o WHERE o.username = :username", UserProfile.class);
        q.setParameter("username", username);
        return q;
    }
    
    public static TypedQuery<UserProfile> UserProfile.findUserProfilesByUsernameEquals(String username, String sortFieldName, String sortOrder) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = UserProfile.entityManager();
        String jpaQuery = "SELECT o FROM UserProfile AS o WHERE o.username = :username";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<UserProfile> q = em.createQuery(jpaQuery, UserProfile.class);
        q.setParameter("username", username);
        return q;
    }
    
}

// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bibsmobile.model;

import com.bibsmobile.model.Event;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Event_Roo_Finder {
    
    public static Long Event.countFindEventsByStateEquals(String state) {
        if (state == null || state.length() == 0) throw new IllegalArgumentException("The state argument is required");
        EntityManager em = Event.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Event AS o WHERE o.state = :state", Long.class);
        q.setParameter("state", state);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Event.countFindEventsByStateEqualsAndCityEquals(String state, String city) {
        if (state == null || state.length() == 0) throw new IllegalArgumentException("The state argument is required");
        if (city == null || city.length() == 0) throw new IllegalArgumentException("The city argument is required");
        EntityManager em = Event.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Event AS o WHERE o.state = :state  AND o.city = :city", Long.class);
        q.setParameter("state", state);
        q.setParameter("city", city);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Event.countFindEventsByTypeEquals(String type) {
        if (type == null || type.length() == 0) throw new IllegalArgumentException("The type argument is required");
        EntityManager em = Event.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Event AS o WHERE o.type = :type", Long.class);
        q.setParameter("type", type);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Event> Event.findEventsByStateEquals(String state) {
        if (state == null || state.length() == 0) throw new IllegalArgumentException("The state argument is required");
        EntityManager em = Event.entityManager();
        TypedQuery<Event> q = em.createQuery("SELECT o FROM Event AS o WHERE o.state = :state", Event.class);
        q.setParameter("state", state);
        return q;
    }
    
    public static TypedQuery<Event> Event.findEventsByStateEquals(String state, String sortFieldName, String sortOrder) {
        if (state == null || state.length() == 0) throw new IllegalArgumentException("The state argument is required");
        EntityManager em = Event.entityManager();
        String jpaQuery = "SELECT o FROM Event AS o WHERE o.state = :state";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Event> q = em.createQuery(jpaQuery, Event.class);
        q.setParameter("state", state);
        return q;
    }
    
    public static TypedQuery<Event> Event.findEventsByStateEqualsAndCityEquals(String state, String city) {
        if (state == null || state.length() == 0) throw new IllegalArgumentException("The state argument is required");
        if (city == null || city.length() == 0) throw new IllegalArgumentException("The city argument is required");
        EntityManager em = Event.entityManager();
        TypedQuery<Event> q = em.createQuery("SELECT o FROM Event AS o WHERE o.state = :state  AND o.city = :city", Event.class);
        q.setParameter("state", state);
        q.setParameter("city", city);
        return q;
    }
    
    public static TypedQuery<Event> Event.findEventsByStateEqualsAndCityEquals(String state, String city, String sortFieldName, String sortOrder) {
        if (state == null || state.length() == 0) throw new IllegalArgumentException("The state argument is required");
        if (city == null || city.length() == 0) throw new IllegalArgumentException("The city argument is required");
        EntityManager em = Event.entityManager();
        String jpaQuery = "SELECT o FROM Event AS o WHERE o.state = :state  AND o.city = :city";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Event> q = em.createQuery(jpaQuery, Event.class);
        q.setParameter("state", state);
        q.setParameter("city", city);
        return q;
    }
    
    public static TypedQuery<Event> Event.findEventsByTypeEquals(String type) {
        if (type == null || type.length() == 0) throw new IllegalArgumentException("The type argument is required");
        EntityManager em = Event.entityManager();
        TypedQuery<Event> q = em.createQuery("SELECT o FROM Event AS o WHERE o.type = :type", Event.class);
        q.setParameter("type", type);
        return q;
    }
    
    public static TypedQuery<Event> Event.findEventsByTypeEquals(String type, String sortFieldName, String sortOrder) {
        if (type == null || type.length() == 0) throw new IllegalArgumentException("The type argument is required");
        EntityManager em = Event.entityManager();
        String jpaQuery = "SELECT o FROM Event AS o WHERE o.type = :type";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Event> q = em.createQuery(jpaQuery, Event.class);
        q.setParameter("type", type);
        return q;
    }
    
}

/**
 * 
 */
package com.bibsmobile.model;

import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.ManyToOne;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.transaction.annotation.Transactional;

import com.bibsmobile.model.Event;
import com.bibsmobile.model.Series;

/**
 * Represents a series of athletic events. An example is the series:
 * "Zappos 200", which is sponsored by the sportswear company Zappos.
 * Subqueries on events in this series may be performed, and users can
 * earn rewards specific to this group of events.
 * @author galen {gedanziger}
 *
 */
@Entity
@Configurable
public class SyncReport {
	/**
	 * Autogenerated id
	 */
	@Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

	/**
	 * Event Synced into
	 */
	@ManyToOne
	private Event event;
	
	/**
	 * Used by hibernate
	 */
	@PersistenceContext
    transient EntityManager entityManager;

	/**
	 * Used by hibernate
	 */
	public static final EntityManager entityManager() {
        EntityManager em = new SyncReport().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

	@Transactional
    public void persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

	@Transactional
    public void remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            SyncReport attached = SyncReport.findSyncReport(this.id);
            this.entityManager.remove(attached);
        }
    }

	@Transactional
    public void flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

	@Transactional
    public void clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

	@Transactional
    public SyncReport merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        SyncReport merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }	
	
	/**
	 * Find a syncreport with a particular id.
	 * Returns null if id is null or object does not exist.
	 * @param id Id of region to find
	 * @return SeriesRegion object from database.
	 */
	public static SyncReport findSyncReport(Long id) {
        if (id == null) return null;
        return entityManager().find(SyncReport.class, id);
    }


    /**
     * Search for sync reports by a particular event.
     * @param series to find regions from
     * @return A TypedQuery object. To get all results, run with .getResultList()
     */
    public static TypedQuery<SyncReport> findSyncReportsByEvent(Event event) {
        if (event == null)
            throw new IllegalArgumentException("The event argument is required");
        EntityManager em = Event.entityManager();
        TypedQuery<SyncReport> q = em.createQuery("SELECT o FROM SyncReport AS o WHERE o.event = :event", SyncReport.class);
        q.setParameter("event", event);
        return q;
    } 
    
	/**
	 * ID of series, autogenerated on persist.
	 * @return the id
	 */
	public Long getId() {
		return id;
	}

	/**
	 * ID of series, autogenerated on persist.
	 * @param id the id to set
	 */
	public void setId(Long id) {
		this.id = id;
	}
}

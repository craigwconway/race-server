/**
 * 
 */
package com.bibsmobile.model;

import java.util.Date;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.EntityManager;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Entity;
import javax.persistence.PersistenceContext;
import javax.persistence.TemporalType;
import javax.persistence.Temporal;
import javax.persistence.Enumerated;

import org.springframework.transaction.annotation.Transactional;

import com.bibsmobile.model.BadgeTriggerEnum;

/**
 * Copy of a badge. All badges are queried on their trigger type and whether they
 * are enabled when a trigger comes in from a queue. If the badge matches, the a
 * UserBadge is created. A badge may be triggered by either an event or a series.
 * @author galen
 *
 */
@Entity
public class SeriesApplicationResponse {
	/**
	 * Autogenerated id
	 */
	@Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;
	
	private String response;
	
	@ManyToOne
	private SeriesApplicationQuestion question;
	
	@ManyToOne
	private SeriesApplication application;
	
    @PersistenceContext
    transient EntityManager entityManager;
    
    public static EntityManager entityManager() {
        EntityManager em = new EventType().entityManager;
        if (em == null)
            throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    @Transactional
    public void persist() {
        if (this.entityManager == null)
            this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void remove() {
        if (this.entityManager == null)
            this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            SeriesApplicationResponse attached = SeriesApplicationResponse.findBadge(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void flush() {
        if (this.entityManager == null)
            this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void clear() {
        if (this.entityManager == null)
            this.entityManager = entityManager();
        this.entityManager.clear();
    }

    @Transactional
    public SeriesApplicationResponse merge() {
        if (this.entityManager == null)
            this.entityManager = entityManager();
        SeriesApplicationResponse merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    /**
	 * @return the id
	 */
	public Long getId() {
		return id;
	}

	/**
	 * @param id the id to set
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * @return the response
	 */
	public String getResponse() {
		return response;
	}

	/**
	 * @param response the response to set
	 */
	public void setResponse(String response) {
		this.response = response;
	}

	public static SeriesApplicationResponse findBadge(Long id) {
        if (id == null)
            return null;
        return entityManager().find(SeriesApplicationResponse.class, id);
    }
    
    public static List<SeriesApplicationResponse> findBadgesByEvent(Event event) {
        return entityManager().createQuery("SELECT o FROM Badge AS o WHERE o.event = :event", SeriesApplicationResponse.class).setParameter("event", event).getResultList();
    }    
}

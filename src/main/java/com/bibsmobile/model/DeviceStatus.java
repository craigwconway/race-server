package com.bibsmobile.model;

import java.security.NoSuchAlgorithmException;

import org.apache.commons.codec.binary.Base64;

import java.util.Date;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.PersistenceContext;
import javax.persistence.PreUpdate;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.transaction.annotation.Transactional;

import com.bibsmobile.model.dto.TimeSyncContainerDto;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
* This holds reports from {@link FuseDevice} objects when uploaded.
*
* @author  galen
* @version 1.0
* @since   2015-12-21 
*/
@Configurable
@Entity
public class DeviceStatus {
	/**
	 * Autogenerated device ID
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long id;

	/**
	 * Associated Device
	 */
	@ManyToOne
	private FuseDevice device;
	
	/**
	 * Associated reader status
	 */
	@Enumerated
	private ReaderStatus readerStatus;

	@Temporal(TemporalType.TIMESTAMP)
	private Date created;
	
	/**
	 * Default constructor for the JSON. (For the JSON).
	 */
	public DeviceStatus() {}
	
	/**
	 * Construct a device status from a ReaderStatus + FuseDevice
	 * @param readerStatus
	 * @param device
	 */
	public DeviceStatus(ReaderStatus readerStatus, FuseDevice device) {
		this.created = new Date();
		this.device = device;
		this.readerStatus = readerStatus;
	}
	/**
	 * @return the id
	 */
	public Long getId() {
		return id;
	}

	/**
	 * @param id the id to set
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * @return the device
	 */
	public FuseDevice getDevice() {
		return device;
	}

	/**
	 * @param device the device to set
	 */
	public void setDevice(FuseDevice device) {
		this.device = device;
	}

	/**
	 * @return the readerStatus
	 */
	public ReaderStatus getReaderStatus() {
		return readerStatus;
	}

	/**
	 * @param readerStatus the readerStatus to set
	 */
	public void setReaderStatus(ReaderStatus readerStatus) {
		this.readerStatus = readerStatus;
	}

	/**
	 * @return the created
	 */
	public Date getCreated() {
		return created;
	}

	/**
	 * @param created the created to set
	 */
	public void setCreated(Date created) {
		this.created = created;
	}

	public static DeviceStatus findDeviceStatus(Long id) {
        if (id == null)
            return null;
        return entityManager().find(DeviceStatus.class, id);
    }
	
	public String toJson() {
		ObjectMapper mapper = new ObjectMapper();
		try {
			return mapper.writeValueAsString(this);
		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
		
	}
    //
	// -------------------------------------------
	// -------------------------------------------
	// Database transaction functions
	// -------------------------------------------
	// Right now we only want to find a device info
	// with the starting ID. If they have tampered
	// with the device id, the user is trying to exploit
	// the system
	
    public static long countDeviceStatuses() {
        return entityManager().createQuery("SELECT COUNT(o) FROM DeviceStatus o", Long.class).getSingleResult();
    }
	// -------------------------------------------
	// -------------------------------------------	
	// -------------------------------------------
	// Begin the gramps framework overhead:
	// -------------------------------------------
    @PersistenceContext
    transient EntityManager entityManager;    		
    public static EntityManager entityManager() {
        EntityManager em = new DeviceStatus().entityManager;
        if (em == null)
            throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    @Transactional
    public void persist() {
        if (this.entityManager == null)
            this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    @Transactional
    public void remove() {
        if (this.entityManager == null)
            this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            DeviceStatus attached = DeviceStatus.findDeviceStatus(this.id);
            this.entityManager.remove(attached);
        }
    }
    @Transactional
    public void flush() {
        if (this.entityManager == null)
            this.entityManager = entityManager();
        this.entityManager.flush();
    }
    @Transactional
    public void clear() {
        if (this.entityManager == null)
            this.entityManager = entityManager();
        this.entityManager.clear();
    }
    @Transactional
    public DeviceStatus merge() {
        if (this.entityManager == null)
            this.entityManager = entityManager();
        DeviceStatus merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
	// -------------------------------------------
	// End the gramps framework overhead:
	// -------------------------------------------
	// -------------------------------------------
}

// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bibsmobile.controller;

import com.bibsmobile.controller.UserAuthoritiesController;
import com.bibsmobile.model.UserAuthorities;
import com.bibsmobile.model.UserAuthoritiesID;
import com.bibsmobile.model.UserAuthority;
import com.bibsmobile.model.UserProfile;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect UserAuthoritiesController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> UserAuthoritiesController.showJson(@PathVariable("id") UserAuthoritiesID id) {
        UserAuthorities userAuthorities = UserAuthorities.findUserAuthorities(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (userAuthorities == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(userAuthorities.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> UserAuthoritiesController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<UserAuthorities> result = UserAuthorities.findAllUserAuthoritieses();
        return new ResponseEntity<String>(UserAuthorities.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> UserAuthoritiesController.createFromJson(@RequestBody String json, UriComponentsBuilder uriBuilder) {
        UserAuthorities userAuthorities = UserAuthorities.fromJsonToUserAuthorities(json);
        userAuthorities.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        RequestMapping a = (RequestMapping) getClass().getAnnotation(RequestMapping.class);
        headers.add("Location",uriBuilder.path(a.value()[0]+"/"+userAuthorities.getId().toString()).build().toUriString());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> UserAuthoritiesController.createFromJsonArray(@RequestBody String json) {
        for (UserAuthorities userAuthorities: UserAuthorities.fromJsonArrayToUserAuthoritieses(json)) {
            userAuthorities.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> UserAuthoritiesController.updateFromJson(@RequestBody String json, @PathVariable("id") UserAuthoritiesID id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        UserAuthorities userAuthorities = UserAuthorities.fromJsonToUserAuthorities(json);
        userAuthorities.setId(id);
        if (userAuthorities.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> UserAuthoritiesController.deleteFromJson(@PathVariable("id") UserAuthoritiesID id) {
        UserAuthorities userAuthorities = UserAuthorities.findUserAuthorities(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (userAuthorities == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        userAuthorities.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByUserAuthority", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> UserAuthoritiesController.jsonFindUserAuthoritiesesByUserAuthority(@RequestParam("userAuthority") UserAuthority userAuthority) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(UserAuthorities.toJsonArray(UserAuthorities.findUserAuthoritiesesByUserAuthority(userAuthority).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByUserProfile", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> UserAuthoritiesController.jsonFindUserAuthoritiesesByUserProfile(@RequestParam("userProfile") UserProfile userProfile) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(UserAuthorities.toJsonArray(UserAuthorities.findUserAuthoritiesesByUserProfile(userProfile).getResultList()), headers, HttpStatus.OK);
    }
    
}

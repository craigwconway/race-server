// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bibsmobile.controller;

import com.bibsmobile.controller.ResultsImportController;
import com.bibsmobile.model.ResultsFile;
import com.bibsmobile.model.ResultsFileMapping;
import com.bibsmobile.model.ResultsImport;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ResultsImportController_Roo_Controller {
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ResultsImportController.createForm(Model uiModel) {
        populateEditForm(uiModel, new ResultsImport());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (ResultsFile.countResultsFiles() == 0) {
            dependencies.add(new String[] { "resultsfile", "resultsfiles" });
        }
        if (ResultsFileMapping.countResultsFileMappings() == 0) {
            dependencies.add(new String[] { "resultsfilemapping", "resultsfilemappings" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "resultsimports/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String ResultsImportController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("resultsimport", ResultsImport.findResultsImport(id));
        uiModel.addAttribute("itemId", id);
        return "resultsimports/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String ResultsImportController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("resultsimports", ResultsImport.findResultsImportEntries(firstResult, sizeNo));
            float nrOfPages = (float) ResultsImport.countResultsImports() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("resultsimports", ResultsImport.findAllResultsImports());
        }
        return "resultsimports/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ResultsImportController.update(@Valid ResultsImport resultsImport, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, resultsImport);
            return "resultsimports/update";
        }
        uiModel.asMap().clear();
        resultsImport.merge();
        return "redirect:/resultsimports/" + encodeUrlPathSegment(resultsImport.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String ResultsImportController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, ResultsImport.findResultsImport(id));
        return "resultsimports/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String ResultsImportController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        ResultsImport resultsImport = ResultsImport.findResultsImport(id);
        resultsImport.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/resultsimports";
    }
    
    void ResultsImportController.populateEditForm(Model uiModel, ResultsImport resultsImport) {
        uiModel.addAttribute("resultsImport", resultsImport);
        uiModel.addAttribute("resultsfiles", ResultsFile.findAllResultsFiles());
        uiModel.addAttribute("resultsfilemappings", ResultsFileMapping.findAllResultsFileMappings());
    }
    
    String ResultsImportController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}

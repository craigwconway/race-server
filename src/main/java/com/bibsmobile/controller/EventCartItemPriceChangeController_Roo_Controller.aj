// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bibsmobile.controller;

import com.bibsmobile.controller.EventCartItemPriceChangeController;
import com.bibsmobile.model.EventCartItemPriceChange;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect EventCartItemPriceChangeController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String EventCartItemPriceChangeController.create(@Valid EventCartItemPriceChange eventCartItemPriceChange, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, eventCartItemPriceChange);
            return "eventitemspricechanges/create";
        }
        uiModel.asMap().clear();
        eventCartItemPriceChange.persist();
        return "redirect:/eventitemspricechanges/" + encodeUrlPathSegment(eventCartItemPriceChange.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String EventCartItemPriceChangeController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("eventcartitempricechange", EventCartItemPriceChange.findEventCartItemPriceChange(id));
        uiModel.addAttribute("itemId", id);
        return "eventitemspricechanges/show";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String EventCartItemPriceChangeController.update(@Valid EventCartItemPriceChange eventCartItemPriceChange, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, eventCartItemPriceChange);
            return "eventitemspricechanges/update";
        }
        uiModel.asMap().clear();
        eventCartItemPriceChange.merge();
        return "redirect:/eventitemspricechanges/" + encodeUrlPathSegment(eventCartItemPriceChange.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String EventCartItemPriceChangeController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        EventCartItemPriceChange eventCartItemPriceChange = EventCartItemPriceChange.findEventCartItemPriceChange(id);
        eventCartItemPriceChange.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/eventitemspricechanges";
    }
    
    void EventCartItemPriceChangeController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("eventCartItemPriceChange_startdate_date_format", "MM/dd/yyyy h:mm:ss a");
        uiModel.addAttribute("eventCartItemPriceChange_enddate_date_format", "MM/dd/yyyy h:mm:ss a");
    }
    
    String EventCartItemPriceChangeController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}

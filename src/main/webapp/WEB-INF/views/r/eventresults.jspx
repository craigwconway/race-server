<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<div xmlns:field="urn:jsptagdir:/WEB-INF/tags/form/fields" xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:fn="http://java.sun.com/jsp/jstl/functions" xmlns:jsp="http://java.sun.com/JSP/Page" xmlns:page="urn:jsptagdir:/WEB-INF/tags/form" xmlns:sec="http://www.springframework.org/security/tags" xmlns:spring="http://www.springframework.org/tags" version="2.0" xmlns:fmt="http://java.sun.com/jsp/jstl/fmt">
    <jsp:directive.page contentType="text/html;charset=UTF-8"/>
    <jsp:output omit-xml-declaration="yes"/>

    <meta name="viewport" content="width=device-width, initial-scale=1" />
    
    <!-- Custom Fonts -->
    <link href='//fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,300,600,700,800' rel='stylesheet' type='text/css'> </link>
    <link href='//fonts.googleapis.com/css?family=Merriweather:400,300,300italic,400italic,700,700italic,900,900italic' rel='stylesheet' type='text/css'> </link>
    
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/bibs-server/resources/styles/outsiders/creative.css" type="text/css"> </link>
    <link rel="stylesheet" href="/bibs-server/resources/styles/outsiders/event.css" type="text/css"> </link>
    <script type="text/javascript" src="/bibs-server/resources/scripts/outsiders/moment.min.js"><!-- --></script>

    <style>
        @media all and (max-width: 500px){
            #result-filter-buttons .ui.button,
            #result-list .ui.label{
                font-size: 2vmax !important;
            }
        }
    </style>
    
    <nav id="mainNav" class="navbar navbar-default navbar-fixed-top">
        <div class="container-fluid">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"><!--  --></span>
                    <span class="icon-bar"><!--  --></span>
                    <span class="icon-bar"><!--  --></span>
                </button>
                <div id="back-btn" onclick="goBack()"><i class="fa fa-arrow-left"><!--  --></i></div>
            </div>

            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                <ul class="nav navbar-nav navbar-right">
                    <li>
                        <a class="page-scroll" href="/bibs-server/r">Home</a>
                    </li>
                    <c:if test="${event.organizer != null }">
                     <li>
                        <a class="page-scroll" href="/bibs-server/r/o/${event.organizer.id}">Organizer</a>
                    </li>                   
                    </c:if>

                </ul>
            </div>
        </div>
    </nav>

    <section class="region-1-dark-bg" id="banner">
        <div class="header-content">
            <div class="header-content-inner">
                <div id="region-header">
                    <div><img id="region-logo" src="/bibs-server/images/whitelogo.png"/></div>
                	<div id="region-title">${event.name }</div>
                	<div id="courses-labels">
                	<c:forEach var="item" items="${event.eventTypes }">
                	<c:if test="${item.distance == '5k' }"><div class="ui zappos green label" id="label-template">5k</div></c:if>
                	<c:if test="${item.distance == '10k' }"><div class="ui zappos yellow label" id="label-template">10k</div></c:if>
                	<c:if test="${item.distance == 'Marathon' }"><div class="ui zappos yellow label" id="label-template">Marathon</div></c:if>
                	<c:if test="${item.distance == 'Half Marathon' }"><div class="ui zappos yellow label" id="label-template">Half</div></c:if>
                	<c:if test="${item.distance != '5k' &amp;&amp; item.distance != '10k' &amp;&amp; item.distance != 'Half Marathon' &amp;&amp; item.distance != 'Marathon'}"><div class="ui zappos yellow label" id="label-template">Other</div></c:if>
                	</c:forEach>
                	</div>
                </div>
            </div>
        </div>
    </section>
    <div style="clear:both;"><!-- --></div>
    <section class="no-padding" id="events">
        <div class="ui center aligned basic segment">
            <div id="event">
                <div class="event-date"><!--  --></div>
                <div class="event-time"><!--  --></div>
                <h4 class="ui header"><div class="sub header date-elev"><!--   --></div></h4>
                <div class="ui search" id="search-user">
                    <div class="ui icon input">
                        <input type="text" name="bibsearch" placeholder="Search bib #, name..." />
                        <button class="circular ui tiny icon button" id="search-single-button"><i class="inverted circular icon fa fa-search"
                           style="font-family:'FontAwesome';top:5px;right:5px"><!--   --></i></button>
                    </div>
                    <div class="results" style="height: 175px; overflow-y: auto"><!--   --></div>
                    <a class="result" id="query-item-template" style="display:none">
                        <div class="content query-content">
                            <div class="title query-title"><!--   --></div>
                            <div class="description query-description"><!--   --></div>
                        </div>
                    </a>
                </div>
                <div id="results">
                    <div id="category-result-container">
                        <h2 class="ui center aligned header result-header">Overall Results</h2>
                        <div class="ui four column centered doubling stackable grid container">
                            <div class="eight wide column">
                                <div id="result-filter-buttons" class="ui four large buttons">
                                    <button class="ui teal button">Overall</button>
                                    <button class="ui teal button">Team</button>
                                    <button class="ui teal button">Gender + Age</button>
                                    <button class="ui yellow button">Medals</button>
                                </div>
                            </div>
                            <div class="centered row">
                                <div id="filter-team-container" class="center aligned column filter-container">
                                    <div class="ui dropdown" id="result-filter-team" style="margin:auto 10px;font-size:1.2em;">
                                        <input type="hidden" name="team" />
                                        <div class="default text">Team Standings</div>
                                        <i class="dropdown icon"><!--  --></i>
                                        <div class="menu">
                                            <div class="item" data-value="null">Overall Team Standings</div>
                                            <div class="item" data-value="M">Teams (M)</div>
                                            <div class="item" data-value="F">Teams (F)</div>
                                            <div class="item" data-value="S">Team Search</div>
                                        </div>
                                    </div>
                                </div>
                                <div id="filter-team-name-container" class="center aligned column filter-container">
                                    <div class="ui search dropdown" id="result-filter-team-name" style="margin:auto 10px;font-size:1.2em;">
                                        <input type="hidden" name="teamName" />
                                        <div class="default text">Team Name</div>
                                        <i class="dropdown icon"><!--  --></i>
                                        <div class="menu"><!--  --></div>
                                    </div>
                                    <div class="item" id="filter-team-name-template" data-value="0" style="display:none"><!--  --></div>
                                </div>
                                <div id="filter-gender-container" class="center aligned column filter-container">
                                    <div class="ui dropdown" id="result-filter-gender" style="margin:auto 10px;font-size:1.2em;">
                                        <input type="hidden" name="type" />
                                        <div class="default text">Filter by Gender</div>
                                        <i class="dropdown icon"><!--  --></i>
                                        <div class="menu">
                                            <div class="item" data-value="null">Overall Gender</div>
                                            <div class="item" data-value="M">Top Male</div>
                                            <div class="item" data-value="F">Top Female</div>
                                        </div>
                                    </div>
                                </div>
                                <div id="filter-age-container" class="center aligned column filter-container">
                                    <div class="ui dropdown" id="result-filter-age" style="margin:auto 10px;font-size:1.2em;">
                                        <input type="hidden" name="age" />
                                        <div class="default text">Filter by Age Group</div>
                                        <i class="dropdown icon"><!--  --></i>
                                        <div class="menu">
                                            <div class="item" data-value="null">Overall Age Group</div>
                                        </div>
                                    </div>
                                    <div class="item" id="filter-team-age-template" data-value="0" style="display:none"><!--  --></div>
                                </div>
                                <div class="center aligned column">
                                    <div class="ui dropdown" id="result-filter-etype" style="margin:auto 10px;font-size:1.2em;">
                                        <input type="hidden" name="etype" />
                                        <div class="default text">Event Type</div>
                                        <i class="dropdown icon"><!--  --></i>
                                        <div class="menu"><!--  --></div>
                                    </div>
                                    <div class="item" id="filter-etype-template" data-value="0" style="display:none"><!--  --></div>
                                </div>
                            </div>
                        </div>
                        <div class="ui divider" style="visibility:hidden;"><!--   --></div>
                        <div class="ui divided relaxed large list" id="result-list"><!--   --></div>
                    </div>
                    <div id="pagination" style="display:none;">
                        <div class="ui pagination menu"><!--  --></div>
                    </div>
                    <a class="icon item" id="pagination-back-template" style="display:none">
                      <i class="left chevron icon"><!--  --></i>
                    </a>
                    <a class="icon item" id="pagination-next-template" style="display:none">
                        <i class="right chevron icon"><!--  --></i>
                    </a>
                    <a class="icon item" id="pagination-backward-template" style="display:none">
                      <i class="angle double left icon"><!--  --></i>
                    </a>
                    <a class="icon item" id="pagination-forward-template" style="display:none">
                        <i class="angle double right icon"><!--  --></i>
                    </a>
                    <a class="item" id="pagination-template" style="display:none">Page Number</a>
                    <div class="item" id="result-list-item-header" style="display:none">
                        <div class="right floated content">
                            <div class="ui label">Finish Time</div>
                        </div>
                        <div class="content">
                            <div class="header">Top 10 <span class="result-list-category-title">Overall</span></div>
                            <div class="description"><!--   --></div>
                        </div>
                    </div>
                    <div class="item" id="result-list-item-template" style="display:none">
                        <div class="left floated middle aligned content">
                            <div class="ui circular large black label"><span class="result-list-item-place"><!--   --></span></div>
                        </div>
                        <div class="right floated content">
                            <div class="ui left pointing blue label"><span class="result-list-item-time">00:42:42</span></div>
                        </div>
                        <div class="content">
                            <a class="header"><span class="result-list-item-name"><!--   --></span>, <span class="result-list-item-age"><!--   --></span> <span class="result-list-item-gender"><!--   --></span></a>
                            <div class="description"><span class="result-list-bib">Bib #<span class="result-list-item-bib"><!--  --></span></span> <span class="result-list-team"><span class="result-list-item-team-container">, Team <span class="result-list-item-team"><!--  --></span></span></span></div>
                            <div class="right floated content result-list-item-ranking-container" style="display:none">
                                <span class="result-list-item-ranking bibs-main-blue"><!--   --></span>
                            </div>
                        </div>
                    </div>
                    <div class="ui divided relaxed large list team-result-list" id="result-list-team-template" style="display:none">
                        <div class="item team-header">
                            <div class="content"><!--  --></div>
                        </div>
                    </div>
                    <div class="ui divided relaxed large list medal-result-list" id="result-list-medal-template" style="display:none">
                        <div class="item medal-header">
                            <div class="content"><!--  --></div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="social">
                <div class="social-header">Share with friends</div>
                <a><i class="fa fa-facebook link icon" id="facebook-share-button"><!--   --></i></a>
                <a href="//twitter.com/share"><i class="fa fa-twitter link icon" id="twitter-share-button"><!--   --></i></a>
                <a href="javascript:void((function()%7Bvar%20e=document.createElement(&apos;script&apos;);e.setAttribute(&apos;type&apos;,&apos;text/javascript&apos;);e.setAttribute(&apos;charset&apos;,&apos;UTF-8&apos;);e.setAttribute(&apos;src&apos;,&apos;http://assets.pinterest.com/js/pinmarklet.js?r=&apos;+Math.random()*99999999);document.body.appendChild(e)%7D)());"><i class="fa fa-pinterest-p link icon" id="pinterest-share-button"><!--   --></i></a>
            </div>
        </div>
    </section>
    <script>
        jQuery('.ui.accordion').accordion();
        jQuery('.ui.checkbox').checkbox();

        jQuery.ajax({
            context: this,
            url: '/bibs-server/events/details/${event.id}',
            error: function() {
                console.log('error in retrieving events');
            },
            success: function(data) {
                this.currentEvent = data;
            },
            type: 'GET'
        }).then(function(eventInfo){
            var currentFilter = null;
            var currentEventTypeID = null;
            var currentTeamFilter = null;
            var currentGenderFilter = null;
            var currentAgeFilter = null;
            var currentPage = 0; var maxPages = 0;
            var lastTeamName = null;
            var teams = [];
            var teamNames = [];
            
            jQuery('#region-title').text(eventInfo.name);
            jQuery('#single-result-container').hide();
            jQuery(".filter-container").hide();
            jQuery("#result-filter-buttons > .button:first-child").addClass("active");
            jQuery("#result-filter-buttons > .button").each(function(i,o){
                if(i === 0){ // overall
                    jQuery(o).off().on("click", function(e){
                        currentFilter = i;
                        jQuery(".filter-container").hide();
                        toggleActiveButton(i);
                        renderCategoryResults(null, null);
                    });
                }
                if(i === 1){ // team
                    jQuery(o).off().on("click", function(e){
                        currentFilter = i;
                        jQuery(".filter-container").hide();
                        jQuery("#filter-team-container").show();
                        var previousTeamFilter = jQuery('#result-filter-team').dropdown('get value');
                        var hasTeamName = false;
                        if(previousTeamFilter == "S"){
                            jQuery("#filter-team-name-container").show();
                            hasTeamName = true;
                            previousTeamFilter = jQuery('#result-filter-team-name').dropdown('get value');
                        }
                        toggleActiveButton(i);
                        
                        teams = [];
                        teamNames = [];
                        jQuery("#result-list").html("");

                        jQuery("#category-result-container > .medal-result-list").remove();
                        jQuery(".team-result-list").not("#result-list-team-template").remove();
                        renderTeamResults(previousTeamFilter, hasTeamName, null);
                        jQuery("#category-result-container").visibility({
                            once: false,
                            // update size when new content loads
                            observeChanges: true,
                            // load content on bottom edge visible
                            onBottomVisible: function() {
                                var previousTeamFilter = jQuery('#result-filter-team').dropdown('get value');
                                var hasTeamName = false;
                                if(previousTeamFilter == "S"){
                                    jQuery("#filter-team-name-container").show();
                                    hasTeamName = true;
                                    previousTeamFilter = jQuery('#result-filter-team-name').dropdown('get value');
                                }
                                toggleActiveButton(i);
                                renderTeamResults(previousTeamFilter, hasTeamName, lastTeamName);
                            }
                        });
                        jQuery("#pagination").hide();
                    });
                }
                if(i === 2){ // gender + age
                    jQuery(o).off().on("click", function(e){
                        currentFilter = i;
                        jQuery(".filter-container").hide();
                        jQuery("#filter-gender-container, #filter-age-container").show();
                        var gender = jQuery("#result-filter-gender").dropdown("get value");
                        var age = jQuery("#result-filter-age").dropdown("get value");
                        renderMedalResults(gender, age, null);
                        toggleActiveButton(i);
                        jQuery("#pagination").hide();
                    });
                }
                if(i === 3){ // medal
                    jQuery(o).off().on("click", function(e){
                        currentFilter = i;
                        jQuery(".filter-container").hide();
                        toggleActiveButton(i);
                        renderMedalResults(null, null, 3);
                        jQuery("#pagination").hide();
                    });
                }
            });

            function toggleActiveButton(i){
                var n = i + 1;
                jQuery("#result-filter-buttons > .button").not("#result-filter-buttons > .button:nth-child(" + n + ")").removeClass("active");
                jQuery("#result-filter-buttons > .button:nth-child(" + n + ")").addClass("active");
                renderQueryDescription();
            }

            reformatEventDate();
            initEventType();

            var ageGroups = [];
            var ageCategories = [];
            var genderCategories = {"male": [], "female": []};

            jQuery.ajax({
                url: "/bibs-server/events/classcategories/list/" + currentEventTypeID,
                error: function(){
                    console.log("Error retrieving class categories");
                },
                success: function(data){
                    var results = JSON.parse(data);
                    for(var i in results){
                        var category = results[i];
                        if(category.gender == "M"){
                            genderCategories["male"].push(category);
                        }else if(category.gender == "F"){
                            genderCategories["female"].push(category);
                        }
                        var pair = category.ageMin + "-" + category.ageMax;
                        if(ageGroups.length == 0 || ageGroups.indexOf(pair) == -1){
                            ageGroups.push(pair);
                            ageCategories.push({ageGroup: pair, categories:[category]});

                            var ageItem = jQuery("#filter-team-age-template").clone().appendTo("#result-filter-age > .menu");
                                ageItem.text(pair);
                                ageItem.attr("data-value", pair);
                                ageItem.removeAttr("id").show();
                        }else{
                            for(var j in ageCategories){
                                if(ageCategories[j].ageGroup == pair){
                                    ageCategories[j].categories.push(category);
                                    break;
                                }
                            }
                        }
                    }
                    // console.log("gender:", genderCategories)
                    // console.log("age:", ageCategories);
                    // console.log("age groups:", ageGroups);
                    initAgeFilter();
                    initGenderFilter();
                },
                type: "GET"
            });
            jQuery.ajax({
                url: "/bibs-server/events/teams?type=" + currentEventTypeID,
                error: function(){
                    console.log("Error retrieving team names");
                },
                success: function(data){
                    var teams = JSON.parse(data);
                    for(var i in teams){
                        var team = teams[i];
                        var teamItem = jQuery('#filter-team-name-template').clone().appendTo('#result-filter-team-name > .menu');
                            teamItem.text(team);
                            teamItem.attr('data-value', team);
                            teamItem.removeAttr('id').show();
                    }
                    initTeamFilter();
                },
                type: "GET"
            });

            jQuery('#search-single-button').bind('click', function(){
                var query = jQuery('input[name="bibsearch"]').val();
                if(query.length > 0){
                    renderSearchResults(query);
                }
            });

            renderCategoryResults(0, null);

            function reformatEventDate(){
                var momentTimeStart = null;
                var dayOfWeek = null;
                var date = null;
                var time = null;
                if(eventInfo.timeStartLocal !== null){
                    momentTimeStart = moment(eventInfo.timeStartLocal, 'MM/DD/YYYY hh:mm:ss a');
                    dayOfWeek = momentTimeStart.format('dddd');
                    date = momentTimeStart.format('MMMM D, YYYY');
                    time = momentTimeStart.format('h:mm a');
                    jQuery('#event').find('.event-date').text(date);
                    jQuery('#event').find('.event-time').text(time);
                }
            }

            function initEventType(){
                var firstEtype = null;
                for(var el in eventInfo.eventTypes){
                    var etype = eventInfo.eventTypes[el];
                    if(el == 0){ firstEtype = etype.id; }
                    var etypeItem = jQuery('#filter-etype-template').clone().appendTo('#result-filter-etype > .menu');
                        etypeItem.text(etype.distance);
                        etypeItem.attr('data-value', etype.id);
                        etypeItem.removeAttr('id').show();
                }

                if( eventInfo.hasOwnProperty('eventTypes') &amp;&amp; eventInfo.eventTypes.length > 1 ){
                    currentEventTypeID = eventInfo.eventTypes[0].id;
                }else{
                	if(eventInfo.hasOwnProperty('eventTypes')) {
                		currentEventTypeID = eventInfo.eventTypes[0].id;
                	}
                    jQuery('#search-type').find('.item:first-child').hide();
                }

                jQuery('#result-filter-etype').dropdown('set selected', firstEtype);
                jQuery('#result-filter-etype').dropdown({
                    onChange: function(value, text, $selectedDOM){
                        currentEventTypeID = value;
                        if(currentFilter !== null){
                            var n = currentFilter + 1;
                            jQuery("#result-filter-buttons > .button:nth-child(" + n + ")").click();
                        }else{
                            renderCategoryResults(null, null);
                        }
                        renderQueryDescription();
                    }
                });
            }

            function initAgeFilter(){
                jQuery('#result-filter-age').dropdown({
                    onChange: function(value, text, $selectedDOM){
                        if(value == 0){
                            currentAgeFilter = null;
                        }else{
                            currentAgeFilter = text;
                        }
                        var gender = jQuery('#result-filter-gender').dropdown('get value');
                        renderMedalResults(gender, value, null);
                        renderQueryDescription();
                    }
                });
                jQuery('#result-filter-age').dropdown('set selected', '0');
            }

            function initTeamFilter(){
                jQuery("#result-filter-team").dropdown({
                    onChange: function(value, text, $selectedDOM){
                        jQuery("#filter-team-name-container").hide();
                        // renderCategoryResults(value);
                        var genderValue = jQuery('#result-filter-gender').dropdown('get value');
                        if(value == 0){
                            currentTeamFilter = null;
                            if(genderValue == 'M'){
                                currentGenderFilter = 'Male';
                            }
                            if(genderValue == 'F'){
                                currentGenderFilter = 'Female';
                            }
                        }else if(value == 'M'){
                            currentTeamFilter = 'Team (M)';
                            if(genderValue == 'F'){
                                jQuery('#result-filter-gender').dropdown('set selected', 'M');
                            }
                        }else if(value == 'F'){
                            currentTeamFilter = 'Team (F)';
                            if(genderValue == 'M'){
                                jQuery('#result-filter-gender').dropdown('set selected', 'F');
                            }
                        }else if(value == 'S'){
                            jQuery("#filter-team-name-container").show();
                            currentTeamFilter = "Team";
                            return;
                        }
                        renderQueryDescription();
                        
                        teams = [];
                        teamNames = [];
                        jQuery("#result-list").html("");

                        jQuery("#category-result-container > .medal-result-list").remove();
                        jQuery(".team-result-list").not("#result-list-team-template").remove();

                        renderTeamResults(value, false, null);
                    }
                });
                jQuery("#result-filter-team-name").dropdown({
                    onChange: function(value, text, $selectedDOM){
                        renderTeamResults(value, true);
                    }
                });
                jQuery("#result-filter-team").dropdown('set selected', '0');
            }

            function initGenderFilter(){
                jQuery('#result-filter-gender').dropdown({
                    onChange: function(value, text, $selectedDOM){
                        if(value == 0){
                            currentGenderFilter = null;
                        }else if(value == 'M'){
                            currentGenderFilter = 'Male';
                        }else if(value == 'F'){
                            currentGenderFilter = 'Female';
                        }
                        var age = jQuery("#result-filter-age").dropdown("get value");
                        renderMedalResults(value, age, null);
                        renderQueryDescription();
                    }
                });
                jQuery('#result-filter-gender').dropdown('set selected', '0');
            }

            function renderQueryDescription(){
                var text = "";
                // console.log(currentFilter);
                if(currentFilter == 1){
                    text = currentTeamFilter + " ";
                    if(!currentTeamFilter){
                        text = "Team ";
                    }
                }
                if(currentFilter == 2){
                    if(currentGenderFilter){
                        text += currentGenderFilter + " ";
                    }
                    if(currentAgeFilter){
                        text += currentAgeFilter + " ";
                    }
                }
                if(currentFilter == 3){
                    text = "Medal ";
                }
                if(text.length == 0){
                    text = "Overall ";
                }
                jQuery('.result-header').text(text + "Results");
            }

            function renderMedalResults(gender, age, max){
                jQuery(".result-cards").hide();
                var url = "/bibs-server/events/typeclassrankings/" + currentEventTypeID;
                
                if(max){
                    url = "/bibs-server/events/typeawards/" + currentEventTypeID;
                }

                jQuery.ajax({
                    context: this,
                    url: url,
                    error: function() {
                        console.log('error in retrieving events')
                    },
                    success: function(data) {
                        results = JSON.parse(data);

                        if(gender &amp;&amp; gender !== "null"){
                            if(gender == "M"){ gender = "male"; }
                            if(gender == "F"){ gender = "female"; }
                            results = results.filter(function(el){
                                var categories = genderCategories[gender];
                                var found = false;
                                for(var i in categories){
                                    var category = categories[i];
                                    if(category.name == el.name){
                                        found = true;
                                    }
                                }
                                return found;
                            });
                        }

                        if(age &amp;&amp; age !== "null"){
                            var range = age.split("-");
                            var min   = +range[0];
                            var max   = +range[1];
                            var filtered = [];
                            results = results.filter(function(el){
                                var found = false;
                                if(el.results.length > 0){
                                    var age = el.results[0].age;
                                    if(age >= min &amp;&amp; age &lt;= max){
                                        found = true;
                                    }
                                }
                                return found;
                            })
                        }

                        jQuery("#result-list").html(" ");
                        jQuery('.result-list-item-header').clone().removeAttr('id').appendTo('#result-list').show();

                        var medals = [];

                        jQuery('#category-result-container > .team-result-list').remove();
                        jQuery(".medal-result-list").not("#result-list-medal-template").remove();
                        for(var i in results){
                            var category = results[i];
                            if(medals.indexOf(category.name) &amp;&amp; category.results.length > 0){
                                medals.push(category.name);
                                var medalHeaderDOM = jQuery('#result-list-medal-template').clone().appendTo('#category-result-container');
                                jQuery(medalHeaderDOM).find('.medal-header > .content').text(category.name);
                                jQuery(medalHeaderDOM).attr('id', 'medal-' + medals.length).show();
                                resultDOM = jQuery('#result-list-item-template').clone().appendTo('#medal-' + medals.length);
                            }
                            var data = category.results;
                            var index = medals.indexOf(category.name)+1;
                            if(max){
                                data.length = max;
                            }
                            for(var j in data){
                                var elem = data[j];
                                var resultDOM = null;
                                resultDOM = jQuery('#result-list-item-template').clone().appendTo('#medal-' + index);
                                if(resultDOM !== null){
                                    var place = +j+1;
                                        jQuery(resultDOM).find('.result-list-item-time').text(elem.timeofficialdisplay);
                                        jQuery(resultDOM).find('.result-list-item-name').text(elem.firstname + " " + elem.lastname);
                                        if(elem.age == null) {
                                        	jQuery(resultDOM).find('.result-list-item-age').text("");
                                        } else {
                                        	jQuery(resultDOM).find('.result-list-item-age').text(elem.age + ", " || "");
                                        }
                                        jQuery(resultDOM).find('.result-list-item-gender').text(elem.gender || "");
                                        jQuery(resultDOM).find('.result-list-item-bib').text(elem.bib);
                                        jQuery(resultDOM).find('.result-list-item-place').text(place);
                                        if(elem.team == null || elem.team == "") {
                                        	jQuery(resultDOM).find(".result-list-item-team").text("");
                                        	jQuery(resultDOM).find(".result-list-team").text("");
                                        } else {
                                            jQuery(resultDOM).find(".result-list-item-team").text(elem.team || "N/A");
                                        }
                                        (function(index, elem){
                                            jQuery(resultDOM).find('a').bind('click', function(){
                                                window.location.href = '/bibs-server/r/r/'+elem.id;
                                            })
                                        })(i, elem)
                                        jQuery(resultDOM).removeAttr('id').show();
                                }
                            }
                        }
                    },
                    type: 'GET'
                });
            }

            function renderTeamResults(filter, searchByName, teamName){
                jQuery(".result-cards").hide();
                // Events.getResultsByGender(id)
                var url = "/bibs-server/raceresults/teamrankings?event=${event.id}&amp;type=" + currentEventTypeID;
                if(!searchByName){
                    if(filter == "M" || filter == "F"){
                        url += "&amp;gender=" + filter;
                    }
                }else{
                    url = "/bibs-server/raceresults/teamdetails?type=" + currentEventTypeID + "&amp;team=" + encodeURIComponent(filter);
                    currentTeamFilter = filter;
                    
                    renderQueryDescription();
                    teams = [];
                    teamNames = [];
                    jQuery("#result-list").html("");

                    jQuery("#category-result-container > .medal-result-list").remove();
                    jQuery(".team-result-list").not("#result-list-team-template").remove();
                }
                if(teamName){
                    url += "&amp;start=" + teamName;
                }
                jQuery.ajax({
                    context: this,
                    url: url,
                    error: function() {
                        console.log("error in retrieving events");
                    },
                    success: function(response) {
                        var data = null;
                        if(response.length > 0){
                            // format data such that all filters return unified
                            if(searchByName){
                                data = [JSON.parse(response)];
                            }else{
                                data = JSON.parse(response);
                            }
                            jQuery(".result-list-item-header").clone().removeAttr("id").appendTo("#result-list").show();

                            for(var i in data){
                                var name = data[i].name || "N/A";
                                if(teamNames.indexOf(name) == -1 &amp;&amp; teamNames.indexOf(name.toLowerCase()) == -1){
                                    teams.push(data[i]);
                                    teamNames.push(name);
                                }
                            }
                            teams.sort(function(a,b) {return (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0);} );
                            // teams.splice(teams.length-1,0,teams.splice(teams.indexOf("N/A"),1)[0]);
                            // console.log(teams, teamNames);

                            // for all existing team names, find corresponding result data
                            for(var i in teamNames){
                                var index = -1;
                                for(var tIndex in teams){
                                    if(teams[tIndex].name.trim().toLowerCase() === teamNames[i].trim().toLowerCase()){
                                        index = tIndex;
                                    }
                                }

                                if(index > -1 &amp;&amp; jQuery("#team-" + i).length === 0){
                                    var team = teams[index];
                                    var teamResults = team.results;

                                    // once result data is found, create one header for each team name
                                    var teamHeaderDOM = jQuery("#result-list-team-template").clone().appendTo("#category-result-container");
                                    jQuery(teamHeaderDOM).find(".team-header > .content").text(team.name || "N/A");
                                    jQuery(teamHeaderDOM).attr("id", "team-" + i).show();

                                    // parse through team results
                                    for(var j in teamResults){
                                        var elem = teamResults[j];
                                        var resultDOM = null;
                                        // if(athleteTeam.trim().toLowerCase() == (team.name).trim().toLowerCase()){
                                            (function(domIndex, athleteIndex, athlete){
                                                resultDOM = jQuery("#result-list-item-template").clone().appendTo("#team-" + domIndex);
                                                var place = +athleteIndex+1;
                                                    jQuery(resultDOM).find(".result-list-item-time").text(elem.timeofficialdisplay);
                                                    jQuery(resultDOM).find(".result-list-item-name").text(elem.firstname + " " + elem.lastname);
                                                    if(elem.age == null) {
                                                    	jQuery(resultDOM).find('.result-list-item-age').text("");
                                                    } else {
                                                    	jQuery(resultDOM).find('.result-list-item-age').text(elem.age + ", " || "");
                                                    }
                                                    jQuery(resultDOM).find(".result-list-item-gender").text(elem.gender || "");
                                                    jQuery(resultDOM).find(".result-list-item-bib").text(elem.bib);
                                                    jQuery(resultDOM).find(".result-list-item-place").text(place);
                                                    var ranking = elem.rankGender.split(" ")[0];
                                                    console.log(ranking, ranking.length-1);
                                                    if(ranking.substr(ranking.length-1) == "1"){
                                                        ranking += "st";
                                                    }else if(ranking.substr(ranking.length-1) == "2"){
                                                        ranking += "nd";
                                                    }else if(ranking.substr(ranking.length-1) == "3"){
                                                        ranking += "rd";
                                                    }else{
                                                        ranking += "th";
                                                    }
                                                    jQuery(resultDOM).find(".result-list-item-ranking").text(ranking + " in Overall " + elem.gender);
                                                    jQuery(resultDOM).find(".result-list-item-ranking-container").show();
                                                    if(elem.team == null || elem.team == "") {
                                                    	jQuery(resultDOM).find(".result-list-item-team").text("");
                                                    	jQuery(resultDOM).find(".result-list-team").text("");
                                                    } else {
                                                        jQuery(resultDOM).find(".result-list-item-team").text(elem.team || "N/A");
                                                        jQuery(resultDOM).find(".result-list-item-team-container").hide();
                                                    }
                                                    jQuery(resultDOM).find("a").bind("click", function(){
                                                        window.location.href = "/bibs-server/r/r/" + athlete.id;
                                                    });
                                                    jQuery(resultDOM).removeAttr("id").show();
                                            })(i, j, elem)
                                        // }
                                    }

                                    if(teamResults.length === 0){
                                        lastTeamName = team.name;
                                    }
                                }
                            }
                            lastTeamName = teamNames[teamNames.length-1];
                        }
                    },
                    type: "GET"
                });
            }

            function renderCategoryResults(gender, age){
                // Events.getResultsByGender(id)
                var url = "/bibs-server/raceresults/search?event=${event.id}&amp;type=" + currentEventTypeID;
                var query = "";
                if(gender !== null &amp;&amp; gender !== 0){
                    query = gender;
                }
                url += "&amp;gender=" + query;

                jQuery.ajax({
                    context: this,
                    url: "/bibs-server/raceresults/count?event=${event.id}&amp;type=" + currentEventTypeID + query,
                    error: function() {
                        console.log("error in retrieving events");
                    },
                    success: function(data) {
                        var count = data;
                        maxPages = Math.ceil(count/10);

                        var isMobile = window.matchMedia("only screen and (max-width: 760px)");

                        var MAX_PAGINATION = isMobile.matches ? 5 : 10;
                        if(maxPages > 1){
                            currentPage = 1;
                            var pagination = jQuery("#pagination").find(".pagination.menu").html("").show();
                            var back       = jQuery("#pagination-back-template");
                            var next       = jQuery("#pagination-next-template");
                            back = back.clone().appendTo(pagination).attr("id", "pagination-back").show();
                            if(maxPages > MAX_PAGINATION){
                                var backward   = jQuery("#pagination-backward-template");
                                backward = backward.clone().appendTo(pagination).attr("id", "pagination-backward").show();
                            }
                            next = next.clone().appendTo(pagination).attr("id", "pagination-next").show();
                            jQuery("#pagination").show();

                            var pageNav = null;
                            console.log("number of pages:", maxPages, "count:", count);
                            for(var i = 0; i &lt; maxPages; i++){
                                (function(index){
                                    var pageNum = +index+1;
                                    pageNav = jQuery("#pagination-template").clone().insertBefore("#pagination-next");
                                    pageNav.text(pageNum).off().on("click", function(){
                                        renderCategoryPagination(pageNum);
                                    });
                                    pageNav.removeAttr("id").addClass("page-item");
                                    if(i &lt; MAX_PAGINATION){
                                        pageNav.show();
                                    }
                                })(i);
                            }

                            if(maxPages > MAX_PAGINATION){
                                var forward    = jQuery("#pagination-forward-template");
                                forward  = forward.clone().insertBefore("#pagination-next").attr("id", "pagination-forward").show();
                            }
                            back.click(function(){
                                if(currentPage &lt; 2){
                                    currentPage = 1;
                                    jQuery("#pagination-back").addClass("disabled");
                                    return;
                                }else{
                                    currentPage--;
                                    if(currentPage % MAX_PAGINATION === 0){
                                        // i.e. page 11 should currently show 11-20 (index = 1),
                                        // so pressing back should display 1-10 (index = 0).
                                        var index = Math.floor(currentPage/MAX_PAGINATION);
                                        if(index > 0){
                                            index = index - 1;
                                        }
                                        
                                        // if previous upper index was 20, new upper index should be 10.
                                        var lower = index * MAX_PAGINATION;
                                        var upper = index * MAX_PAGINATION + (MAX_PAGINATION - 1);
                                        jQuery(".ui.pagination.menu > .page-item").show();
                                        jQuery(".ui.pagination.menu > .page-item:lt(" + lower + ")").hide();
                                        jQuery(".ui.pagination.menu > .page-item:gt(" + upper + ")").hide();
                                    }

                                    renderCategoryPagination(currentPage);
                                }
                            });
                            next.click(function(){
                                if(currentPage === maxPages){
                                    jQuery("#pagination-next").addClass("disabled");
                                    return;
                                }else{
                                    currentPage++;

                                    if(currentPage % MAX_PAGINATION === 1){
                                        // i.e. page 20 should currently show 11-20 (index = 1),
                                        // so pressing next should display 21-30 (index = 2).
                                        var index = Math.floor(currentPage/MAX_PAGINATION);
                                        
                                        // if previous upper index was 20, new upper index should be 10.
                                        var lower = index * MAX_PAGINATION;
                                        var upper = index * MAX_PAGINATION + (MAX_PAGINATION - 1);
                                        jQuery(".ui.pagination.menu > .page-item").show();
                                        jQuery(".ui.pagination.menu > .page-item:lt(" + lower + ")").hide();
                                        jQuery(".ui.pagination.menu > .page-item:gt(" + upper + ")").hide();
                                    }

                                    renderCategoryPagination(currentPage);
                                }
                            });
                            if(backward){
                                backward.click(function(){
                                    if(Math.floor(currentPage/MAX_PAGINATION) === 0){
                                        jQuery("#pagination-backward").addClass("disabled");
                                        return;
                                    }else{
                                        jQuery("#pagination-backward").removeClass("disabled");
                                        // get current index then decrement backwards.
                                        // i.e. page 13 should currently show 11-20 (index = 1),
                                        // so pressing backward should display 1-10 (index = 0).
                                        var index = Math.floor(currentPage/MAX_PAGINATION);
                                        if(index > 0){
                                            index = index - 1;
                                        }
                                        // if previous upper index was 20, new upper index should be 10.
                                        var lower = index * MAX_PAGINATION;
                                        var upper = index * MAX_PAGINATION + (MAX_PAGINATION - 1);
                                        jQuery(".ui.pagination.menu > .page-item").show();
                                        jQuery(".ui.pagination.menu > .page-item:lt(" + lower + ")").hide();
                                        jQuery(".ui.pagination.menu > .page-item:gt(" + upper + ")").hide();

                                        currentPage = lower + 1;
                                        renderCategoryPagination(currentPage);
                                    }
                                });
                            }
                            if(forward){
                                forward.click(function(){
                                    if(Math.floor(currentPage/MAX_PAGINATION) === Math.floor(maxPages/MAX_PAGINATION)){
                                        jQuery("#pagination-forward").addClass("disabled");
                                        return;
                                    }else{
                                        jQuery("#pagination-forward").removeClass("disabled");
                                        // get current index then increment forwards.
                                        // i.e. page 13 should currently show 11-20 (index = 1),
                                        // so pressing forward should display 21-30 (index = 2).
                                        var index = Math.floor(currentPage/MAX_PAGINATION);
                                        if(index &lt; Math.floor(maxPages/MAX_PAGINATION) &amp;&amp; currentPage % 10 !== 0){
                                            index = index + 1;
                                        }
                                        // if previous upper index was 20, new upper index should be 10.
                                        var lower = index * MAX_PAGINATION;
                                        var upper = index * MAX_PAGINATION + (MAX_PAGINATION - 1);
                                        jQuery(".ui.pagination.menu > .page-item").show();
                                        jQuery(".ui.pagination.menu > .page-item:lt(" + lower + ")").hide();
                                        jQuery(".ui.pagination.menu > .page-item:gt(" + upper + ")").hide();

                                        currentPage = lower + 1;
                                        renderCategoryPagination(currentPage);
                                    }
                                });
                            }
                        }
                    },
                    type: "GET"
                }).then(function(data){
                    renderCategoryPagination(currentPage, gender);
                });
            }

            function renderCategoryPagination(page){
                if(currentPage !== page){
                    currentPage = page;
                }
                if(currentPage &lt; 2){
                    currentPage = 1;
                    jQuery("#pagination-back").addClass("disabled");
                }else{
                    jQuery("#pagination-back").removeClass("disabled");
                }
                if(currentPage === maxPages){
                    jQuery("#pagination-next").addClass("disabled");
                }else{
                    jQuery("#pagination-next").removeClass("disabled");
                }
                if(Math.floor(currentPage/10) === 0){
                    jQuery("#pagination-backward").addClass("disabled");
                }else{
                    jQuery("#pagination-backward").removeClass("disabled");
                }
                if(Math.floor(currentPage/10) === Math.floor(maxPages/10)){
                    jQuery("#pagination-forward").addClass("disabled");
                }else{
                    jQuery("#pagination-forward").removeClass("disabled");
                }
                console.log("current page:", currentPage, page, maxPages);
                // Events.getResultsByGender(id)
                var url = "/bibs-server/raceresults/search?event=${event.id}&amp;type=" + currentEventTypeID;
                var gender = jQuery('#result-filter-gender').dropdown('get value');

                var query = "";
                if(gender &amp;&amp; gender !== 0){
                    query = "&amp;gender=" + gender;
                }
                url += query;

                if(currentPage > 0){
                    url += "&amp;page=" + currentPage;
                }

                jQuery.ajax({
                    context: this,
                    url: url,
                    error: function() {
                        console.log("error in retrieving events")
                    },
                    success: function(response) {
                        var results = JSON.parse(response);
                        // console.log(results)

                        jQuery("#result-list").html("");
                        jQuery("#category-result-container > .team-result-list").remove();
                        jQuery("#category-result-container > .medal-result-list").remove();
                        jQuery(".result-list-item-header").clone().removeAttr("id").appendTo("#result-list").show();

                        for(var i in results){
                            var elem = results[i];

                            var place = +i + (currentPage-1)*10 + 1;
                            var resultDOM = jQuery("#result-list-item-template").clone().appendTo("#result-list");
                                jQuery(resultDOM).find(".result-list-item-time").text(elem.timeofficialdisplay);
                                jQuery(resultDOM).find(".result-list-item-name").text(elem.firstname + " " + elem.lastname);
                                if(elem.age == null) {
                                	jQuery(resultDOM).find('.result-list-item-age').text("");
                                } else {
                                	jQuery(resultDOM).find('.result-list-item-age').text(elem.age + ", " || "");
                                }
                                jQuery(resultDOM).find(".result-list-item-gender").text(elem.gender);
                                jQuery(resultDOM).find(".result-list-item-bib").text(elem.bib);
                                jQuery(resultDOM).find(".result-list-item-place").text(place);
                                if(elem.team == null || elem.team == "") {
                                	jQuery(resultDOM).find(".result-list-item-team").text("");
                                	jQuery(resultDOM).find(".result-list-team").text("");
                                } else {
                                    jQuery(resultDOM).find(".result-list-item-team").text(elem.team || "N/A");
                                }
                                (function(index, elem){
                                    jQuery(resultDOM).find("a").bind("click", function(){
                                        window.location.href = "/bibs-server/r/r/"+elem.id;
                                    })
                                })(i, elem)
                                jQuery(resultDOM).removeAttr("id").show();
                        }
                        // jQuery(".result-cards").show();
                        jQuery("#result-filter-ttype > .field:first-child").find("input").prop("checked", "checked");
                    },
                    type: "GET"
                }).then(function(){
                    var shiftIndex = 1;
                    if(jQuery("#pagination-back").is(":visible")){
                        shiftIndex = 2;
                    }
                    var pageIndex = currentPage === 1 ? 2 : currentPage + shiftIndex;
                    jQuery("#pagination > .pagination.menu > .page-item").removeClass("active");
                    jQuery("#pagination > .pagination.menu > .page-item:nth-child(" + pageIndex + ")").addClass("active");
                });
            }

            function renderSearchResults(query){
                var resultPromise = null;
                if(isNaN(query)){
                    // resultPromise = Events.getResultsByName(query);
                    resultPromise = jQuery.ajax({
                                        context: this,
                                        url: '/bibs-server/raceresults/search?event=${event.id}&amp;name=' + query,
                                        error: function() {
                                            console.log('error in retrieving events')
                                        },
                                        success: function(data) {
                                            this.currentResult = data;
                                        },
                                        type: 'GET'
                                    });
                }else{
                    // resultPromise = Events.getResultsByBib(query);
                    resultPromise = jQuery.ajax({
                                        context: this,
                                        url: '/bibs-server/raceresults/search?event=${event.id}&amp;bib=' + query,
                                        error: function() {
                                            console.log('error in retrieving events')
                                        },
                                        success: function(data) {
                                            this.currentResult = data;
                                        },
                                        type: 'GET'
                                    });
                }

                resultPromise.then(function(data){
                    var results = JSON.parse(data);

                    if(results !== null &amp;&amp; results !== undefined){
                        // renderSingleResult(result);
                        if(results.length == 1){
                            window.location.href = '/bibs-server/r/r/' + results[0].id;
                        }else if(results.length > 1){
                            jQuery('.results').html('');
                            for(var i in results){
                                // console.log(results[i]);
                                var queryDOM = jQuery('#query-item-template').clone().appendTo('.results');
                                    jQuery(queryDOM).find('.query-title').text(results[i].firstname + ' ' + results[i].lastname);
                                    jQuery(queryDOM).find('.query-description').text('Bib #' + results[i].bib);
                                    jQuery(queryDOM).removeAttr('id').show();
                                    (function(index){
                                        jQuery(queryDOM).attr('href', '/bibs-server/r/r/' + results[index].id);
                                    })(i);
                            }
                            jQuery('.results').addClass('transition visible');
                            setTimeout(function(){
                                jQuery('.results').removeClass('visible').addClass('hidden');
                            }, 7000);
                        }else if(results.length == 0){
                            jQuery('#single-result-container').hide();
                            alert("We couldn't find someone with that query. Please double-check the bib number or name!");
                        }
                    }else{
                        jQuery('#single-result-container').hide();
                        alert("We couldn't find someone with that query. Please double-check the bib number or name!");
                    }
                })
            }
        });

        function goBack(){
            window.location = "/bibs-server/r/e/${event.id}";
        }
        function goInfo(){
        	window.location = "/bibs-server/r/e/${event.id}/info";
        }
        function goResults(){
        	window.location = "/bibs-server/r/e/${event.id}/results";
        }        
    </script>
</div>

